import com.github.triplet.gradle.androidpublisher.ReleaseStatus

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "com.google.firebase.appdistribution"
    id "com.starter.easylauncher"
    id "com.github.triplet.play"
}

apply from: "../gradle/licensee.gradle"

def getVersionCode = { ->
    return Integer.valueOf(System.getenv().get("GITLAB_BUILD_NUMBER") ?: projectVersionCode)
}

android {
    defaultConfig {
        applicationId "com.passbolt.mobile.android"
        versionCode getVersionCode()
        versionName projectVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            firebaseAppDistribution {
                appId "1:660923335137:android:08eec6c125f36ba9b092a0"
                serviceCredentialsFile findProperty("serviceKey") ?: ""
                groups "qa"
            }
            testCoverageEnabled = false
        }
        qa {
            initWith debug
            matchingFallbacks = ['release']

            applicationIdSuffix ".qa"
            debuggable true
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            firebaseAppDistribution {
                appId "1:660923335137:android:c7e452d7912a9e3ab092a0"
                serviceCredentialsFile findProperty("serviceKey") ?: ""
                groups "qa"
            }
        }
        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    buildFeatures {
        viewBinding true
    }
}

play {
    track = "production"
    releaseStatus = ReleaseStatus.DRAFT
    userFraction = 1.0d
    releaseName = "$projectVersionName-$projectVersionCode"
    defaultToAppBundles = true
}

easylauncher {
    buildTypes {
        debug {
            enable true
            filters = customRibbon(
                label: "debug:${getVersionCode()}",
                labelColor: "#000000",
                ribbonColor: "#41C1FF"
            )
        }
        qa {
            enable true
            filters = customRibbon(
                label: "qa:${getVersionCode()}",
                labelColor: "#000000",
                ribbonColor: "#0C9115"
            )
        }
    }
}

dependencies {
    implementation project(':architecture')
    implementation project(':startup')
    implementation project(':setup')
    implementation project(':passboltapi')
    implementation project(':ui')
    implementation project(':common')
    implementation project(':storage')
    implementation project(':navigation')
    implementation project(':mappers')
    implementation project(':qrscan')
    implementation project(':gopenpgp')
    implementation project(':autofillresources')
    implementation project(':authentication')
    implementation project(':main')
    implementation project(':home')
    implementation project(':settings')
    implementation project(':featureflags')
    implementation project(':database')
    implementation project(':secrets')
    implementation project(':security')
    implementation project(':linksapi')
    implementation project(':users')
    implementation project(':logger')
    implementation project(':accountdetails')
    implementation project(':localization')
    implementation project(':folderdetails')
    implementation project(':groupdetails')
    implementation project(':coreui')
    implementation project(':locationdetails')
    implementation project(':createfolder')
    implementation project(':folders')
    implementation project(':groups')
    implementation project(':tagsdetails')
    implementation project(':helpmenu')
    implementation project(':logs')
    implementation project(':resourcemoremenu')
    implementation project(':resources')
    implementation project(':resourcedetails')
    implementation project(':fulldatarefresh')
    implementation project(':resourcetypes')
    implementation project(':notifications')
    implementation project(':autofill')
    implementation project(':inappreview')
    implementation project(':envinfo')
    implementation project(':idlingresource')
    implementation project(':entity')

    debugImplementation libs.quality.leakcanary

    implementation libs.androidx.processLifecycle
    implementation libs.coil.core
    implementation libs.coil.base
    implementation libs.di.koin
    implementation libs.gson
    implementation libs.androidx.appStartUp

    androidTestImplementation project(':commontest')
    androidTestImplementation libs.androidx.appcompat
    androidTestImplementation libs.test.androidTestsRunner
    androidTestImplementation libs.test.androidTestRules
    androidTestImplementation libs.test.espressoCore
    androidTestImplementation libs.test.androidTestKtx
    androidTestImplementation libs.di.koinTest
    androidTestImplementation libs.di.koinTestJUnit
    androidTestImplementation libs.test.androidTestIntents
    androidTestImplementation libs.test.mockitoAndroid
    androidTestImplementation libs.test.espressoOkHttpIdlingResource
}
